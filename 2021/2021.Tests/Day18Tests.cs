namespace Advent2021.Tests;
public class Day18Tests
{

    [Theory]
    [InlineData("[9,1]", 29)]
    [InlineData("[[9,1],[1,9]]", 129)]
    [InlineData("[[[[0,7],4],[[7,8],[6,0]]],[8,1]]", 1384)]
    [InlineData("[[[[1,1],[2,2]],[3,3]],[4,4]]", 445)]
    [InlineData("[[[[3,0],[5,3]],[4,4]],[5,5]]", 791)]
    [InlineData("[[[[5,0],[7,4]],[5,5]],[6,6]]", 1137)]
    [InlineData("[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]", 3488)]
    [InlineData("[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]", 4140)]
    public void Can_get_magnitude(string input, long expected)
    {

        //When
        var result = Day18.CalculateMagnitude(input);

        //Then
        Assert.Equal(expected, result);
    }

    [Theory]
    [InlineData("[[[[0,7],4],[7,[[8,4],9]]],[1,1]]", "[[[[0,7],4],[15,[0,13]]],[1,1]]")]
    [InlineData("[[[[[9,8],1],2],3],4]", "[[[[0,9],2],3],4]")]
    [InlineData("[7,[6,[5,[4,[3,2]]]]]", "[7,[6,[5,[7,0]]]]")]
    [InlineData("[[6,[5,[4,[3,2]]]],12]", "[[6,[5,[7,0]]],14]")]
    [InlineData("[[6,[5,[4,[3,2]]]],1]", "[[6,[5,[7,0]]],3]")]
    [InlineData("[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]")]
    [InlineData("[[3,[2,[1,[7,3]]]],[63,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[66,[5,[4,[3,2]]]]]")]
    [InlineData("[[3,[2,[8,0]]],[9,[5,[4,[3,2]]]]]", "[[3,[2,[8,0]]],[9,[5,[7,0]]]]")]
    [InlineData("[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]", "[[[[0,7],4],[7,[[8,4],9]]],[1,1]]")]
    [InlineData("[[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]", "[[[[4,0],[5,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]")]
    [InlineData("[[[[4,0],[5,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]", "[[[[4,0],[5,4]],[[0,[7,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]")]
    [InlineData("[[[[4,0],[5,4]],[[0,[7,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]", "[[[[4,0],[5,4]],[[7,0],[15,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]")]
    [InlineData("[[[[4,0],[5,4]],[[7,0],[15,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]", "[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]")]
    [InlineData("[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[0,[11,3]],[[6,3],[8,8]]]]]", "[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[11,0],[[9,3],[8,8]]]]]")]
    [InlineData("[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[11,0],[[9,3],[8,8]]]]]", "[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[11,9],[0,[11,8]]]]]")]
    [InlineData("[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[11,9],[0,[11,8]]]]]", "[[[[4,0],[5,4]],[[7,0],[15,5]]],[10,[[11,9],[11,0]]]]")]
    [InlineData("[[[[5,11],[13,0]],[[15,14],[14,0]]],[[2,[11,10]],[[0,8],[7,[1,6]]]]]", "[[[[5,11],[13,0]],[[15,14],[14,0]]],[[2,[11,10]],[[0,8],[8,0]]]]")]
    public void Can_explode(string input, string expected)
    {
        //When
        var result = Day18.CheckReduce(input);

        //Then
        Assert.Equal(expected, result);
    }

    [Theory]
    [InlineData("[[[[4,3],4],4],[7,[[8,4],9]]]", "[1,1]", "[[[[[4,3],4],4],[7,[[8,4],9]]],[1,1]]")]
    public void Can_sum_lines(string first, string second, string expected)
    {
        //When
        var result = Day18.Sum(first, second);

        //Then
        Assert.Equal(expected, result);
    }

    [Fact]
    public void Can_split_into_pair()
    {
        var input = "1,2";
        var (l, r) = Day18.SplitIntoPair(input);
        Assert.Equal("1", l);
        Assert.Equal("2", r);
        input = "[2,3],4";
        var (l1, r1) = Day18.SplitIntoPair(input);
        Assert.Equal("[2,3]", l1);
        Assert.Equal("4", r1);
        input = "4,[2,3]";
        var (l2, r2) = Day18.SplitIntoPair(input);
        Assert.Equal("4", l2);
        Assert.Equal("[2,3]", r2);
        input = "[4,5],[2,3]";
        var (l3, r3) = Day18.SplitIntoPair(input);
        Assert.Equal("[4,5]", l3);
        Assert.Equal("[2,3]", r3);
        input = "[4,[5,6]],[2,3]";
        var (l4, r4) = Day18.SplitIntoPair(input);
        Assert.Equal("[4,[5,6]]", l4);
        Assert.Equal("[2,3]", r4);
        input = "[4,[5,6]],[[2,7],3]";
        var (l5, r5) = Day18.SplitIntoPair(input);
        Assert.Equal("[4,[5,6]]", l5);
        Assert.Equal("[[2,7],3]", r5);
    }

    [Theory]
    [InlineData("[[[[0,[4,5]],[0,0]],[[[4,5],[2,6]],[9,5]]],[7,[[[3,7],[4,3]],[[6,3],[8,8]]]]]", "[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]]")]
    [InlineData("[[[[[4,0],[5,4]],[[7,7],[6,0]]],[[8,[7,7]],[[7,9],[5,0]]]],[[2,[[0,8],[3,4]]],[[[6,7],1],[7,[1,6]]]]]", "[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]]")]
    [InlineData("[[[[[6,7],[6,7]],[[7,7],[0,7]]],[[[8,7],[7,7]],[[8,8],[8,0]]]],[[[[2,4],7],[6,[0,5]]],[[[6,8],[2,8]],[[2,1],[4,5]]]]]", "[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]]")]
    [InlineData("[[[[[7,0],[7,7]],[[7,7],[7,8]]],[[[7,7],[8,8]],[[7,7],[8,7]]]],[7,[5,[[3,8],[1,4]]]]]", "[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]]")]
    [InlineData("[[[[[7,7],[7,8]],[[9,5],[8,7]]],[[[6,8],[0,8]],[[9,9],[9,0]]]],[[2,[2,2]],[8,[8,1]]]]", "[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]]")]
    [InlineData("[[[[[6,6],[6,6]],[[6,0],[6,7]]],[[[7,7],[8,9]],[8,[8,1]]]],[2,9]]", "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]")]
    [InlineData("[[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]],[1,[[[9,3],9],[[9,0],[0,7]]]]]", "[[[[7,8],[6,7]],[[6,8],[0,8]]],[[[7,7],[5,0]],[[5,5],[5,6]]]]")]
    [InlineData("[[[[12,12],[6,0]],[[[14,7],[8,9]],[8,[8,1]]]],[2,9]]", "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]")]
    [InlineData("[[[[9,0],[15,14]],[[15,0],[25,0]]],[3,9]]", "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]")]
    [InlineData("[[[[0,18],[6,14]],[[15,0],[25,0]]],[3,9]]", "[[[[6,6],[7,7]],[[0,7],[7,7]]],[[[5,5],[5,6]],9]]")]
    public void Can_reduce_entire_string(string input, string expected)
    {
        //When
        var result = Day18.Reduce(input);

        //Then
        Assert.Equal(expected, result);
    }

    [Theory]
    [InlineData("Day18-test.txt", "[[[[6,6],[7,6]],[[7,7],[7,0]]],[[[7,7],[7,7]],[[7,8],[9,9]]]]")]
    [InlineData("Day18-test2.txt", "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]")]
    public void Can_reduce_file(string input, string expected)
    {
        //Given
        var fileName = $"{Helpers.DirectoryPath}{input}";

        //When
        var result = Day18.ReduceFile(fileName);

        //Then
        Assert.Equal(expected, result);
    }

    [Fact]
    public void Can_finish_homework()
    {
        //Given
        var fileName = $"{Helpers.DirectoryPath}Day18-test.txt";

        //When
        var result = Day18.CompleteHomework(fileName);

        //Then
        Assert.Equal(4140, result);
    }


    [Fact]
    public void Can_get_largest_magnitude()
    {
        //Given
        var fileName = $"{Helpers.DirectoryPath}Day18-test.txt";

        //When
        var result = Day18.GetLargestMagnitued(fileName);

        //Then
        Assert.Equal(3993, result);
    }

}

