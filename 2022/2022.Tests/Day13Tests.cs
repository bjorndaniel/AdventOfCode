namespace AoC2022.Tests;
public class Day13Tests
{
    [Fact]
    public void Can_parse_input()
    {
        //Given
        var filename = $"{Helpers.DirectoryPathTests}Day13-test.txt";

        //When
        var pairs = Day13.ParseInput(filename);

        //Then
        Assert.True(8 == pairs.Count(), $"Expected 8, got {pairs.Count()}");
        Assert.True("1,1,3,1,1" == pairs.First().Left, $"Expected 1,1,3,1,1 got {pairs.First().Left}");
        Assert.True("1,1,5,1,1" == pairs.First().Right, $"Expected 1,1,5,1,1 got {pairs.First().Right}");
        Assert.True("1,[2,[3,[4,[5,6,7]]]],8,9" == pairs.Last().Left, $"Expected 1,[2,[3,[4,[5,6,7]]]],8,9 got {pairs.Last().Left}");
        Assert.True("1,[2,[3,[4,[5,6,0]]]],8,9" == pairs.Last().Right, $"Expected 1,[2,[3,[4,[5,6,0]]]],8,9 got {pairs.Last().Right}");

    }

    [Theory]
    [InlineData("1,1,3,1,1", "1,1,5,1,1", true)]
    [InlineData("1,1,5,1,1", "1,1,3,1,1", false)]

    [InlineData("[1],[2,3,4]", "[1],4", true)]
    [InlineData("[1],4", "[1],[2,3,4]", false)]

    [InlineData("9", "[8,7,6]", false)]
    [InlineData("[8,7,6]", "9", true)]

    [InlineData("[4,4],4,4", "[4,4],4,4,4", true)]
    [InlineData("[4,4],4,4,4", "[4,4],4,4", false)]

    [InlineData("7,7,7,7", "7,7,7", false)]
    [InlineData("7,7,7", "7,7,7,7", true)]

    [InlineData("", "3", true)]
    [InlineData("3", "", false)]

    [InlineData("[[]]", "[]", false)]
    [InlineData("[]", "[[]]", true)]

    [InlineData("1,[2,[3,[4,[5,6,7]]]],8,9", "1,[2,[3,[4,[5,6,0]]]],8,9", false)]
    [InlineData("1,[2,[3,[4,[5,6,0]]]],8,9", "1,[2,[3,[4,[5,6,7]]]],8,9", true)]


    [InlineData("[1,2],4", "[1,2],3", false)]
    [InlineData("5,6,6,7,3", "5,6,6,7", false)]
    [InlineData("[[4,[9,1,0,6],[4,1,3]],[0],[[4,1],10,[1,5,2,1],1,5],[2,5,[10,4,4,10,4],0],7],[3,[[0,5,9,6,5],[7],8]],[],[4,4],[]", "[[[7,8,5]],0,5,[0,[7,8,8,5],[],7,10]],[[3,8,[10,6],2],8,[1,[9,8,4,5,9],8,[4,3,8,2],[2,5,7]],10],[[10,9,1,6,0],[1,[6,10,8],[7,3,0,0,6]]],[9,8,[[3,5],[0,7,7,2],7]],[[],1,[1],[1,10],3]", true)]
    [InlineData("[],[[],0,2],[9,[]],[3,[[8,4,9,1,9]],[10,3,7],1,[5,[10,0,4],[8,8,4,10,8],[6,1,3]]]", "[[[7,8,5]],0,5,[0,[7,8,8,5],[],7,10]],[[3,8,[10,6],2],8,[1,[9,8,4,5,9],8,[4,3,8,2],[2,5,7]],10],[[10,9,1,6,0],[1,[6,10,8],[7,3,0,0,6]]],[9,8,[[3,5],[0,7,7,2],7]],[[],1,[1],[1,10],3]", true)]
    [InlineData("[8,[[4],4]],[],[10,5,10]", "[0,[[8,6,5,4],[0,6]]],[[3],[[0],3]],[[[6,0]],2,10,10],[]", false)]
    [InlineData("[[4,[7,1,10],[0,0,3,8,9]]],[],[[[],[1,7],[1,5],3],[6,[2,6,7,1]],[[10]]]", "[[]],[]", false)]
    [InlineData("[9,4],[8,6,[],[]]", "[[8],2,0]", false)]
    [InlineData("[7],[[[3,8,1,1],[6,2,10],[5],[5]],10],[5,2,[3,[8,2,1,5],8,[10],[2,2,2,8]],[]],[[7,6,9,[0,6],3],[[1],[0,0,4,7,6]],8,[[8,5,1,4],[10,0,0],5],7]", "[],[[[0,8,2,5],[8,4,6,7],0],9,3,[],6],[],[1,[0,[3,10,4,6,2],6,8,0],8,[[],[0,0,6,9],[0,1]],[[6,2],[5,10,1],3]],[[[3]],5,8]", false)]
    [InlineData("[[[9,10,9],9,[7,4,6,0]],3],[[0,[2,6],[7,4,6,5],10,9],1,1,9,4],[5,0,[[],[2,5,3,9,2],8,[5,3,3,5],[10,4,10]]]", "[],[]", false)]
    [InlineData("[[[0,6,2]],2,[[7],7,7,10,[6,5]],[[1,10,0,3]]],[3,3,10,5,[6,[6,4],6,7]],[[[4],8,8,[5]]]", "[0,[[2,3],[10,7,3,10,5],[4,4,2,1,0],[9,5,2,7]],[[9],[1,6],[3,5,8,4],[3,7,1,6,9]]],[2,[4,[]],[[9,10,6],7,10,[10,0,10,0]],[[7,7,5],9,6,4],[[7,6,0,5,0],8]],[]", false)]
    [InlineData("[7],[[],[9,9,[2,0],[1,7,0,5]],9,[6],9]", "[7,4,3,10],[[8,[1,0,6]],[8,0,[],[0,4,7,6],[]]],[[[10,7,9],[7,1,1],[6,10,8,0,0]],10,[5,9,0],[[2,9,1,4]],[[3,2,10],[10,5]]]", true)]
    [InlineData("[[10,[1,5],[1,4,3,0,8],2,[9]],[],3],[[[8,0,5],[],2],[2],5,[1,6,[8,8,7],5]],[10,7,9],[]", "[[[1],[8,0,0,8,1],[1],[8,4]],[2,[],[2],4,[1,8,9]],9],[],[[4,8,[8,0],[10,0,10,0,0]],1,2,1],[[6],5,6,9,6],[[[5],[7,4,9],2,[6]],9,[[10],6]]", false)]
    [InlineData("[[6,[4,8,2,8,10]],[[5,10,0],3,[1],7,[8,9,0,1]],[3,10,[],[7,2,1]],9],[0,[],[[],2,5,4,[10,9,4,4,10]],[1,7]],[[3,[],7,9,[2]],7,2,9],[]", "[[]],[[3,6,[],6],5,[]],[8,[],[],9,[]],[]", false)]
    [InlineData("[8,[],[8,[],[10,4,4,1]]],[[9,10]],[3,9,3,3]", "[[4],7,[2,0,[8],7,4],[[3,9,6],5]],[],[[2,8,1,[8,7]],8]", false)]
    [InlineData("[[8],[],[[1,2,10],5],[[0],[8,1,6]],[[4,9,6,10,4],4,[2],[4,8,2,8],4]],[[[3],7,[6],0,[5,6]],[[8,9],7,4,6],[6],[[3],9,3],7]", "[],[2,3,10]", false)]
    [InlineData("[[[1,8,8],[3,8],[1],4,9],[1,[4,10]],[]],[8,7,8,6],[],[[5,4,[6,10,8,1],2],[6],0],[0,[10],9,[0,10,[5]],[]]", "[[6],5],[4,[],8],[3,10],[[[0,7],4,7,[7],[]],5,2],[]", true)]
    [InlineData("[[2,[6,1],4,[7,3,8,2,10]],[3],9,[2,[]]]", "[4],[[[1,6],[9,4,5],[8,3],3]],[],[[9,2,[3],[2,1]]]", true)]
    [InlineData("[[[9,7,2,4]],9,[2,1]],[]", "[[5],3,8,[[7,9,3,5,5],[2,8,7,4],[0,6,10]]],[[3,[0,8]],6,0,[10]]", false)]
    [InlineData("[[[6,1,4,1],8,6,10,[5,3,9,10]],[[],4,0],9],[4,1,7,6],[[5,[3,8,1,4,6],1,[]],7]", "[],[7,[],[1,[6,10,5,3],[1],7,[9,0,5,0,5]],[7,5,4,3],[[4,7,6],[],4,[8,9,2,9,3]]],[[0,[],[8,4,8],1],4,0,[6,[8,10,1,8,2],3,6]],[]", false)]
    [InlineData("[0],[0],[[],[10,2,6,[],1],0,[[1],[6,9,6,7],[],0,2],[6,[6,10,5,5],[8,5,7,4]]],[],[]", "[8,[[2,6,8,4],1]],[[],[],[[8,3,0,8],6],[3,[1,3],8]],[1,10,[2,2,[0,5,2,9],[4,10,4,8]]],[[8,9,6],[[],[4]]]", false)]
    [InlineData("[[[8,3,2,2]],[7,2]]", "[8,6,8,[[1,9,7,10,0],1,8,10]],[1],[[[9,5,2]]],[[0,[0,4],[4],[3],9]],[[[5],[5],[10,8,9,2],[9,9,9,9],[2,1,6]],1,[],8,[[4,2],2,10,8]]", false)]
    [InlineData("[[[],10],9,[1,[0,6,6,3,1],[4,1,2,1,1]],3,[[]]]", "[],[0],[[[9,7,9,7],[0,10],8,[10],3],[[10,0,3,9],4,[1,10,3,8],[1,2,0,7]],7],[[]]", false)]
    [InlineData("[[[7], [2, 5], [4, 1, 10, 9]], [[], [6, 0, 2, 1], [0], [7, 0], 9], 8, [6], 9], [4, [], []], [2]", "[7], [[6, 6]]", false)]
    [InlineData("[1,[2,[10,8,2,1,1]],0]", "[[1]],[[[2,4,10,2],[]],3,8],[9,3,[5,[3,0],[0],[4]],6,[[9,8,3,7],4,[10,10,8],10,[6,6]]],[[[3],7,[],[10,5]],0],[5,[[3,9,0,2,1],0,[4,5,2],[6]]]", false)]
    public void Can_compare_pair(string left, string right, bool expected)
    {
        //Given
        var pair = new Pair(left, right);

        //When
        var result = Day13.ComparePair(pair);

        //Then
        Assert.True(expected == result, $"Expected comparison to be {expected} but was {result}");
    }


    [Fact]
    public void Can_solve_part1_for_test()
    {
        //Given
        var filename = $"{Helpers.DirectoryPathTests}Day13-test.txt";

        //When
        var result = Day13.SolvePart1(filename);

        //Then
        Assert.True(13 == result, $"Expected 13, got {result}");
    }
}
